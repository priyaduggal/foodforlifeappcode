{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport declare type IMakePayments = 'This device can make payments and has a supported card' | 'This device cannot make payments.' | 'This device can make payments but has no supported cards';\nexport declare type IShippingType = 'shipping' | 'delivery' | 'store' | 'service';\nexport declare type IBillingRequirement = 'none' | 'all' | 'postcode' | 'name' | 'email' | 'phone';\nexport declare type ITransactionStatus = 'success' | 'failure' | 'invalid-billing-address' | 'invalid-shipping-address' | 'invalid-shipping-contact' | 'require-pin' | 'incorrect-pin' | 'locked-pin';\nexport declare type ICompleteTransaction = 'Payment status applied.';\nexport declare type IUpdateItemsAndShippingStatus = 'Updated List Info' | 'Did you make a payment request?';\nexport declare type IMerchantCapabilities = '3ds' | 'credit' | 'debit' | 'emv';\nexport declare type ISupportedNetworks = 'visa' | 'amex' | 'discover' | 'masterCard';\nexport interface IPaymentResponse {\n    billingNameFirst?: string;\n    billingNameMiddle?: string;\n    billingNameLast?: string;\n    billingEmailAddress?: string;\n    billingSupplementarySubLocality?: string;\n    billingAddressStreet?: string;\n    billingAddressCity?: string;\n    billingAddressState?: string;\n    billingPostalCode?: string;\n    billingCountry?: string;\n    billingISOCountryCode?: string;\n    shippingNameFirst?: string;\n    shippingNameMiddle?: string;\n    shippingNameLast?: string;\n    shippingEmailAddress?: string;\n    shippingPhoneNumber?: string;\n    shippingSupplementarySubLocality?: string;\n    shippingAddressStreet?: string;\n    shippingAddressCity?: string;\n    shippingAddressState?: string;\n    shippingPostalCode?: string;\n    shippingCountry?: string;\n    shippingISOCountryCode?: string;\n    paymentData: string;\n    transactionIdentifier: string;\n    paymentMethodDisplayName?: string;\n    paymentMethodNetwork?: string;\n    paymentMethodTypeCard?: string;\n}\nexport interface IOrderItem {\n    label: string;\n    amount: number;\n}\nexport interface IShippingMethod {\n    identifier: string;\n    label: string;\n    detail: string;\n    amount: number;\n}\nexport interface IOrderItemsAndShippingMethods {\n    items: IOrderItem[];\n    shippingMethods?: IShippingMethod[];\n}\nexport interface IOrder extends IOrderItemsAndShippingMethods {\n    merchantIdentifier: string;\n    currencyCode: string;\n    countryCode: string;\n    billingAddressRequirement?: IBillingRequirement | IBillingRequirement[];\n    shippingAddressRequirement?: IBillingRequirement | IBillingRequirement[];\n    shippingType?: IShippingType;\n    merchantCapabilities?: IMerchantCapabilities | IMerchantCapabilities[];\n    supportedNetworks?: ISupportedNetworks | ISupportedNetworks[];\n}\nexport interface ISelectedShippingContact {\n    shippingAddressCity: string;\n    shippingAddressState: string;\n    shippingPostalCode: string;\n    shippingISOCountryCode: string;\n}\n/**\n * @name Apple Pay\n * @description\n * A dependency free Cordova plugin to provide Apple Pay functionality.\n *\n * @usage\n * ```typescript\n * import { ApplePay } from '@ionic-native/apple-pay/ngx';\n *\n *\n * constructor(private applePay: ApplePay) { }\n *\n * ...\n * async applePay() {\n *   // This block is optional -- only if you need to update order items/shipping\n *   // methods in response to shipping method selections\n *   this.applePay.startListeningForShippingContactSelection()\n *     .subscribe(async selection => {\n *       try {\n *         await this.applePay.updateItemsAndShippingMethods({\n *           items: getFromSelection(selection),\n *           shippingMethods: getFromSelection(selection),\n *         });\n *       }\n *       catch {\n *         // handle update items error\n *       }\n *     });\n *\n *   try {\n *     const applePayTransaction = await this.applePay.makePaymentRequest({\n *       items,\n *       shippingMethods,\n *       merchantIdentifier,\n *       currencyCode,\n *       countryCode,\n *       billingAddressRequirement: ['name', 'email', 'phone'],\n *       shippingAddressRequirement: 'none',\n *       shippingType: 'shipping'\n *     });\n *\n *     const transactionStatus = await completeTransactionWithMerchant(applePayTransaction);\n *     await this.applePay.completeLastTransaction(transactionStatus);\n *   } catch {\n *     // handle payment request error\n *     // Can also handle stop complete transaction but these should normally not occur\n *   }\n *\n *   // only if you started listening before\n *   await this.applePay.stopListeningForShippingContactSelection();\n * }\n * ```\n */\nexport declare class ApplePay extends IonicNativePlugin {\n    /**\n     * Detects if the current device supports Apple Pay and has any capable cards registered.\n     * @return {Promise<IMakePayments>} Returns a promise\n     *\n     * @usage\n     * try {\n     *   const message = await this.applePay.canMakePayments();\n     *   // Apple Pay is enabled and a supported card is setup. Expect:\n     *   // 'This device can make payments and has a supported card'\n     * } catch (message) {\n     *   // There is an issue, examine the message to see the details, will be:\n     *   // 'This device cannot make payments.''\n     *   // 'This device can make payments but has no supported cards'\n     * }\n     */\n    canMakePayments(): Promise<IMakePayments>;\n    /**\n     * Starts listening for shipping contact selection changes\n     * Any time the user selects shipping contact, this callback will fire.\n     * You *must* call `updateItemsAndShippingMethods` in response or else the\n     * user will not be able to process payment.\n     * @return {Observable<ISelectedShippingContact>} emits with shipping contact information on\n     *   shipping contact selection changes\n     */\n    startListeningForShippingContactSelection(): Observable<ISelectedShippingContact>;\n    /**\n     * Stops listening for shipping contact selection changes\n     * @return {Promise} whether stop listening was successful. This should\n     *   really only fail if this is called without starting listening\n     */\n    stopListeningForShippingContactSelection(): Promise<boolean>;\n    /**\n     * Update the list of pay sheet items and shipping methods in response to\n     * a shipping contact selection event. This *must* be called in response to\n     * any shipping contact selection event or else the user will not be able\n     * to complete a transaction on the pay sheet. Do not call without\n     * subscribing to shipping contact selection events first\n     *\n     * @param {IOrderItemsAndShippingMethods} list `items` and `shippingMethods` properties.\n     * @returns {Promise<IUpdateItemsAndShippingStatus>}\n     *\n     * @usage\n     * this.applePay.startListeningForShippingContactSelection().pluck('shippingAddressState').subscribe(shippingAddressState => {\n     *   let shippingMethods;\n     *   if ('AK' === shippingAddressState) {\n     *     shippingMethods = [{\n     *         identifier: 'Alaska',\n     *         label: 'Alaska',\n     *         detail: 'For shipping to Alaska',\n     *         amount: 9.99\n     *     },];\n     *   } else {\n     *     shippingMethods = [{\n     *         identifier: 'Continental',\n     *         label: 'Continental',\n     *         detail: 'For shipping Continentally',\n     *         amount: 5.99\n     *     }];\n     *   }\n     *   this.paySheetItems.shippingCost = {\n     *      label: 'Shipping Cost',\n     *      amount: shippingMethod[0].amount\n     *   }\n     *   this.applePay.updateItemsAndShippingMethods(this.paySheetItems, shippingMethods);\n     * });\n     */\n    updateItemsAndShippingMethods(list: IOrderItemsAndShippingMethods): Promise<IUpdateItemsAndShippingStatus>;\n    /**\n     * Request a payment with Apple Pay\n     *\n     * @param {IOrder} order\n     * @return {Promise<IPaymentResponse>} Returns a promise that resolves when something happens\n     *\n     * @usage\n     * try {\n     *   const paymentResponse = this.applePay.makePaymentRequest({\n     *     items: [\n     *       {\n     *         label: '3 x Basket Items',\n     *         amount: 49.99\n     *       },\n     *       {\n     *         label: 'Next Day Delivery',\n     *         amount: 3.99\n     *       },\n     *       {\n     *         label: 'My Fashion Company',\n     *         amount: 53.98\n     *       }\n     *     ],\n     *     shippingMethods: [\n     *       {\n     *         identifier: 'NextDay',\n     *         label: 'NextDay',\n     *         detail: 'Arrives tomorrow by 5pm.',\n     *         amount: 3.99\n     *       },\n     *       {\n     *         identifier: 'Standard',\n     *         label: 'Standard',\n     *         detail: 'Arrive by Friday.',\n     *         amount: 4.99\n     *       },\n     *       {\n     *         identifier: 'SaturdayDelivery',\n     *         label: 'Saturday',\n     *         detail: 'Arrive by 5pm this Saturday.',\n     *         amount: 6.99\n     *       }\n     *     ],\n     *     merchantIdentifier: 'merchant.apple.test',\n     *     currencyCode: 'GBP',\n     *     countryCode: 'GB',\n     *     billingAddressRequirement: 'none',\n     *     shippingAddressRequirement: 'none',\n     *     shippingType: 'shipping',\n     *   });\n     *\n     *   // The user has authorized the payment.\n     *\n     *   // Handle the token, asynchronously, i.e. pass to your merchant bank to\n     *   // action the payment, then once finished, depending on the outcome:\n     *\n     *   // Here is an example implementation:\n     *\n     *   const captureStatus = await MyPaymentProvider.authorizeApplePayToken(paymentResponse.paymentData);\n     *   await this.applePay.completeLastTransaction('success');\n     * }\n     * catch (err) {\n     *   if (isPaymentAuthError(err)) {\n     *     this.completeLastTransaction('failure');\n     *   }\n     *   else {\n     *     // Failed to open pay sheet or user canceled payment\n     *   }\n     * }\n     */\n    makePaymentRequest(order: IOrder): Promise<IPaymentResponse>;\n    /**\n     * Once the makePaymentRequest has been resolved successfully, the device will be waiting for a completion event.\n     * This means, that the application must proceed with the token authorization and return a success, failure,\n     * or other validation error. Once this has been passed back, the Apple Pay sheet will be dismissed via an animation.\n     *\n     * @param {ITransactionStatus} complete\n     * @return {Promise<ICompleteTransaction>} Returns a promise that resolves after confirmation of payment authorization completion\n     *\n     */\n    completeLastTransaction(complete: ITransactionStatus): Promise<ICompleteTransaction>;\n}\n"]}